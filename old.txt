python:
    # Deprecated
    class CompositeAnimation:
        def __init__(self, name, imageAnimation):
            self.name=name
            self.imageAnimations = [imageAnimation]

        def add(self, *imageAnimations):
            self.imageAnimations += imageAnimations
            return self
        
        def buildDynamic(self, dynamicSourceFile):
            top = []
            bottom = []
            left = []
            right = []
            frames = []
            directions = self.imageAnimations[0].directions
            images = {}
            for anim in self.imageAnimations:
                frames.append(anim.frames)
                top.append(anim.yoffset)
                bottom.append(anim.yoffset + anim.height)
                left.append(anim.xoffset)
                right.append(anim.xoffset + anim.width)
                directions = [d for d in directions if d in anim.directions]
                images[anim] = anim.buildDynamic(dynamicSourceFile)

            frames = lcm(*frames)
            top = min(*top)
            bottom = max(*bottom)
            left = min(*left)
            right = max(*right)
            width = right-left
            height = bottom-top

            displayables = {}
            for dir in directions:
                displayables[dir] = {}
                for i in range(frames):
                    dis = []
                    for anim in self.imageAnimations:
                        dis += [(anim.xoffset, anim.yoffset), images[anim][dir][i % anim.frames]]
                    display[dir].append(Composite((width,height), *dis))
            return displayables

    # deprecated
    class AnimData:
        def __init__(self,d=[Direction.NONE], f=1, x=0, y=0, r=0, c=0, w=IMAGE_SIZE, h=IMAGE_SIZE, t=0.16, xoffset=0, yoffset=0, pxls_tl = False):
            self.frames = f
            self.loc = [0, 0, w, h]
            self.x = 0
            self.y = 0
            self.df = t
            if pxls_tl is True:
                self.x = x
                self.y = y
            else:
                self.x = c * w
                self.y = r * h
            self.width = w
            self.height = h
            self.yoffset = yoffset
            self.xoffset = xoffset
            self.directions = d

    # deprecated
    class ImageAnimation(Enum):
        def __new__(cls, tag, data):
            obj = builtins.object.__new__(cls)
            obj._value_ = tag
            return obj

        def __init__(self, tag, data):
            self.tag = tag
            self.frames = data.frames
            self.x = data.x
            self.y = data.y
            self.df = data.df
            self.width = data.width
            self.height = data.height
            self.yoffset = data.yoffset
            self.xoffset = data.xoffset
            self.directions = data.directions
            
        def buildDynamic(self, dynamicSourceFile):
            displayables = {}
            frame = 0
            for dir in self.directions:
                displayables[dir] = []
                for i in range(self.frames):
                    loc = (self.x + self.width * frame, self.y, self.width, self.height)
                    displayables[dir].append(Crop(loc, dynamicSourceFile))
                    frame += 1
            return displayables
    
    #deprecated
    class CharAnimData(AnimData):
        def __init__(self, d=[Direction.RIGHT, Direction.UP, Direction.LEFT, Direction.DOWN], h=IMAGE_SIZE*2, **kwargs):
            super().__init__(d=d, h=h, **kwargs)

    #deprectaed
    class CharacterAnimations1(ImageAnimation):
        DEFAULT     = "",               CharAnimData()
        IDLE        = "idle",           CharAnimData(f=6, r=1)
        WALK        = "walk",           CharAnimData(f=6, r=2)
        SLEEP       = "sleep",          CharAnimData(f=6, r=3, d=[Direction.DOWN])
        SITTING     = "sitting",        CharAnimData(f=6, r=4, d=[Direction.RIGHT, Direction.LEFT])
        SIT         = "sit",            CharAnimData(f=6, r=5, d=[Direction.RIGHT, Direction.LEFT])
        PHONE       = "phone",          CharAnimData(f=12, r=6, d=[Direction.DOWN])
        PHONE_START = "phone start",    CharAnimData(f=3, r=6, d=[Direction.DOWN])
        PHONE_LOOP  = "phone loop",     CharAnimData(f=6, r=6, c=3, d=[Direction.DOWN])
        PHONE_END   = "phone end",      CharAnimData(f=3, r=6, c=9, d=[Direction.DOWN])
        BOOK        = "book",           CharAnimData(f=12, r=7, d=[Direction.DOWN])
        BOOK_LOOP   = "book loop",      CharAnimData(f=6, r=7, d=[Direction.DOWN])
        BOOK_FLIP   = "book flip",      CharAnimData(f=6, r=7, c=6, d=[Direction.DOWN])
        PUSH_TROLLEY= "push_trolley",   CharAnimData(f=6, r=8)
        TROLLEY     = "trolley",        CharAnimData(f=3, r=8, c=12, w=IMAGE_SIZE*2, yoffset=IMAGE_SIZE, xoffset=IMAGE_SIZE)
        PICK_UP     = "pick_up",        CharAnimData(f=12, r=9)
        GIFT        = "gift",           CharAnimData(f=10, r=10)
        LIFT        = "lift",           CharAnimData(f=14, r=11)
        THROW       = "throw",          CharAnimData(f=14, r=12)
        HIT         = "hit",            CharAnimData(f=6, r=13)
        PUNCH       = "punch",          CharAnimData(f=6, r=14)
        STAB        = "stab",           CharAnimData(f=6, r=15)
        KNIFE       = "knife",          CharAnimData(f=6, r=15, c=24)
        GUN_GRAB    = "gun grab",       CharAnimData(f=4, r=16)
        GUN_IDLE    = "gun idle",       CharAnimData(f=6, r=17)
        GUN_SHOOT   = "gun shoot",      CharAnimData(f=3, r=18)
        HURT        = "hurt",           CharAnimData(f=3, r=19)

    #deprecated
    class AnimationDirector(Director):
        def __init__(self):
            super().__init__()
            self.displayables = {}
            self.displayable = None
            self.imageAnimations = []
            self.sourceFiles = []
            self.dir = Direction.NONE
            self.frame = 0
            self.anim = None
            self.source = None
            self.queue = []
            self.redrawTime = 0.01

        def __setDisplayables(self, imageAnimations, sourceFiles, displayables):
            if(len(sourceFiles) <= 0 or len(imageAnimations) <= 0):
                raise IndexError("0 Length animation")
            self.displayables = displayables
            self.imageAnimations = imageAnimations
            self.sourceFiles = sourceFiles
            self.displayable = DynamicDisplayable(self.dynamicDisplayable_getCurrentFrame)
        
        def getDisplayable(self):
            return self.displayable

        def setAnimation(self, imageAnimation):
            if(not imageAnimation in self.imageAnimations):
                raise IndexError(str(imageAnimation)+" not contained in animations")
            self.setQueueAnimations(imageAnimation)
            self.resetAnimation()
            return self

        def setSource(self, sourceFile):
            if(not sourceFile in self.sourceFiles):
                raise IndexError(str(sourceFile)+" not contained in animations")
            self.source = sourceFile
            self.resetAnimation()
            return self

        def setQueueAnimations(self, *imageAnimations):
            self.queue = list(imageAnimations)[::-1]
            return self

        def queueAnimation(self, *imageAnimations):
            self.queue = list(imageAnimations)[::-1] + self.queue

        def interuptAnimation(self, imageAnimation, continueFromCurrent=True):
            if continueFromCurrent: self.queue.append(self.anim)
            self.queue.append(imageAnimation)
            self.resetAnimation()
        
        def setDirection(self, dir):
            self.dir = dir
            return self

        def resetAnimation(self):
            self.frame = 0
            self.__onNewAnimLoop()
            return self

        def __onNewAnimLoop(self):
            if(len(self.queue) > 0):
                self.__popQueue()
            pass

        def __popQueue(self):
            self.anim = self.queue.pop()
            self.dt = self.anim.df

        def onLoop(self, trans, st, at):
            super().onLoop(trans, st, at)
            self.increamentFrames(1)

        def increamentFrames(self, add=0):
            self.frame += add
            a,dir,f,dis = self.__getCurrentFrameInfo()
            b = f < self.frame
            self.frame = f
            if b: self.__onNewAnimLoop()
            return a,dir,f,dis

        def __iadd__(self, add):
            self.increamentFrames(add)

        def __getCurrentFrameInfo(self):
            anim = self.imageAnimations[0] if self.anim is None else self.anim
            dir = self.dir if self.dir in anim.directions else anim.directions[0]
            frame = self.frame % anim.frames
            print(anim, dir, frame)
            return (anim, dir, frame, self.displayables[anim][dir][frame])

        def dynamicDisplayable_getSourceFile(self, st, at):
            return (self.sourceFiles[0] if self.source is None else self.source.file, None)

        def dynamicDisplayable_getCurrentFrame(self, st, at):
            a,dir,f,d = self.__getCurrentFrameInfo()
            return d, self.redrawTime
    
    #deprecated
    class AnimationDirectorFactory:
        def __init__(self):
            self.imageAnimations = []
            self.sourceFiles = []

        def setImageAnimations(self, *imageAnimations):
            self.imageAnimations = imageAnimations
            return self
        
        def setSourceFiles(self, *sourceFiles):
            self.sourceFiles = sourceFiles
            return self

        def build(self):
            director = AnimationDirector()
            dynamicSourceFile = DynamicDisplayable(director.dynamicDisplayable_getSourceFile)
            displayables = {}
            for anim in self.imageAnimations:
                displayables[anim] = anim.buildDynamic(dynamicSourceFile)
            director.__setDisplayables(self.imageAnimations, self.sourceFiles, displayables)
            return director